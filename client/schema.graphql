## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input CreatePodInput {
  _id: ID
  title: String!
}

input CreateUsersInput {
  _id: ID
  name: String!
  noteId: ID
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
}

input MutatePodInput {
  _id: ID!
  title: String
}

input MutateUsersInput {
  _id: ID!
  name: String
  noteId: ID
}

type Mutation {
  createPod(input: CreatePodInput!): Pod
  updatePod(input: MutatePodInput!): Pod
  deletePod(input: MutatePodInput!): Pod
  createUsers(input: CreateUsersInput!): Users
  updateUsers(input: MutateUsersInput!): Users
  deleteUsers(input: MutateUsersInput!): Users
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

"""@model"""
type Pod {
  """@id"""
  _id: ID!
  title: String!

  """
  @oneToMany(field: 'note', key: 'noteId')
  @oneToMany(field: 'note')
  """
  users(filter: UsersFilter): [Users]!
}

input PodFilter {
  _id: IDInput
  title: StringInput
  and: [PodFilter!]
  or: [PodFilter!]
  not: PodFilter
}

type PodResultList {
  items: [Pod]!
  offset: Int
  limit: Int
  count: Int
}

input PodSubscriptionFilter {
  and: [PodSubscriptionFilter!]
  or: [PodSubscriptionFilter!]
  not: PodSubscriptionFilter
  _id: IDInput
  title: StringInput
}

type Query {
  getPodMembers: [Users]
  getPod(id: ID!): Pod
  findPods(filter: PodFilter, page: PageRequest, orderBy: OrderByInput): PodResultList!
  getUsers(id: ID!): Users
  findUsers(filter: UsersFilter, page: PageRequest, orderBy: OrderByInput): UsersResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newPod(filter: PodSubscriptionFilter): Pod!
  updatedPod(filter: PodSubscriptionFilter): Pod!
  deletedPod(filter: PodSubscriptionFilter): Pod!
  newUsers(filter: UsersSubscriptionFilter): Users!
  updatedUsers(filter: UsersSubscriptionFilter): Users!
  deletedUsers(filter: UsersSubscriptionFilter): Users!
}

"""@model"""
type Users {
  """@id"""
  _id: ID!
  name: String!

  """@manyToOne(field: 'users', key: 'noteId')"""
  note: Pod
}

input UsersFilter {
  _id: IDInput
  name: StringInput
  noteId: IDInput
  and: [UsersFilter!]
  or: [UsersFilter!]
  not: UsersFilter
}

type UsersResultList {
  items: [Users]!
  offset: Int
  limit: Int
  count: Int
}

input UsersSubscriptionFilter {
  and: [UsersSubscriptionFilter!]
  or: [UsersSubscriptionFilter!]
  not: UsersSubscriptionFilter
  _id: IDInput
  name: StringInput
}