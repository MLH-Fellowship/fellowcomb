## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input CreatePodInput {
  _id: ID
  title: String!
}

input CreateUserInput {
  _id: ID
  name: String!
  podId: ID
}

input GetPodMembersInput {
  podID: ID!
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
}

input MutatePodInput {
  _id: ID!
  title: String
}

input MutateUserInput {
  _id: ID!
  name: String
  podId: ID
}

type Mutation {
  createPod(input: CreatePodInput!): Pod
  updatePod(input: MutatePodInput!): Pod
  deletePod(input: MutatePodInput!): Pod
  createUser(input: CreateUserInput!): User
  updateUser(input: MutateUserInput!): User
  deleteUser(input: MutateUserInput!): User
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

"""@model"""
type Pod {
  """@id"""
  _id: ID!
  title: String!

  """
  @oneToMany(field: 'pod', key: 'podId')
  @oneToMany(field: 'pod')
  """
  users(filter: UserFilter): [User]!
}

input PodFilter {
  _id: IDInput
  title: StringInput
  and: [PodFilter!]
  or: [PodFilter!]
  not: PodFilter
}

type PodResultList {
  items: [Pod]!
  offset: Int
  limit: Int
  count: Int
}

input PodSubscriptionFilter {
  and: [PodSubscriptionFilter!]
  or: [PodSubscriptionFilter!]
  not: PodSubscriptionFilter
  _id: IDInput
  title: StringInput
}

type Query {
  getPodMembers(input: GetPodMembersInput!): [User]
  getPod(id: ID!): Pod
  findPods(filter: PodFilter, page: PageRequest, orderBy: OrderByInput): PodResultList!
  getUser(id: ID!): User
  findUsers(filter: UserFilter, page: PageRequest, orderBy: OrderByInput): UserResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newPod(filter: PodSubscriptionFilter): Pod!
  updatedPod(filter: PodSubscriptionFilter): Pod!
  deletedPod(filter: PodSubscriptionFilter): Pod!
  newUser(filter: UserSubscriptionFilter): User!
  updatedUser(filter: UserSubscriptionFilter): User!
  deletedUser(filter: UserSubscriptionFilter): User!
}

"""@model"""
type User {
  """@id"""
  _id: ID!
  name: String!

  """@manyToOne(field: 'users', key: 'podId')"""
  pod: Pod
}

input UserFilter {
  _id: IDInput
  name: StringInput
  podId: IDInput
  and: [UserFilter!]
  or: [UserFilter!]
  not: UserFilter
}

type UserResultList {
  items: [User]!
  offset: Int
  limit: Int
  count: Int
}

input UserSubscriptionFilter {
  and: [UserSubscriptionFilter!]
  or: [UserSubscriptionFilter!]
  not: UserSubscriptionFilter
  _id: IDInput
  name: StringInput
}