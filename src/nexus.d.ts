/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "./context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ClusterWhereUniqueInput: { // input type
    id?: string | null; // String
    name?: string | null; // String
    roleId?: string | null; // String
  }
  UserWhereUniqueInput: { // input type
    discord_id?: string | null; // String
    id?: string | null; // String
    username?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenRootTypes {
  Cluster: { // root type
    id: string; // String!
    name: string; // String!
    roleId: string; // String!
  }
  Query: {};
  User: { // root type
    calendly?: string | null; // String
    discord_id: string; // String!
    github_url?: string | null; // String
    id: string; // String!
    linkedin?: string | null; // String
    name: string; // String!
    pictureURL?: string | null; // String
    username: string; // String!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  ClusterWhereUniqueInput: NexusGenInputs['ClusterWhereUniqueInput'];
  UserWhereUniqueInput: NexusGenInputs['UserWhereUniqueInput'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
}

export interface NexusGenFieldTypes {
  Cluster: { // field return type
    id: string; // String!
    name: string; // String!
    roleId: string; // String!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
    search: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    calendly: string | null; // String
    clusters: NexusGenRootTypes['Cluster'][]; // [Cluster!]!
    discord_id: string; // String!
    github_url: string | null; // String
    id: string; // String!
    linkedin: string | null; // String
    name: string; // String!
    pictureURL: string | null; // String
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Cluster: { // field return type name
    id: 'String'
    name: 'String'
    roleId: 'String'
    users: 'User'
  }
  Query: { // field return type name
    me: 'User'
    search: 'User'
    token: 'String'
    user: 'User'
  }
  User: { // field return type name
    calendly: 'String'
    clusters: 'Cluster'
    discord_id: 'String'
    github_url: 'String'
    id: 'String'
    linkedin: 'String'
    name: 'String'
    pictureURL: 'String'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Cluster: {
    users: { // args
      after?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      before?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Query: {
    search: { // args
      searchquery?: string | null; // String
    }
    user: { // args
      username?: string | null; // String
    }
  }
  User: {
    clusters: { // args
      after?: NexusGenInputs['ClusterWhereUniqueInput'] | null; // ClusterWhereUniqueInput
      before?: NexusGenInputs['ClusterWhereUniqueInput'] | null; // ClusterWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Cluster" | "Query" | "User";

export type NexusGenInputNames = "ClusterWhereUniqueInput" | "UserWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}