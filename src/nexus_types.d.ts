/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */





declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ClusterWhereUniqueInput: { // input type
    id?: string | null; // String
    name?: string | null; // String
    roleId?: string | null; // String
  }
  UserWhereUniqueInput: { // input type
    discord_id?: string | null; // String
    id?: string | null; // String
    username?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Cluster: { // root type
    default: boolean; // Boolean!
    id: string; // String!
    name: string; // String!
    roleId: string; // String!
  }
  Query: {};
  User: { // root type
    calendly?: string | null; // String
    discord_id: string; // String!
    github_url?: string | null; // String
    id: string; // String!
    linkedin?: string | null; // String
    name: string; // String!
    pictureURL?: string | null; // String
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Cluster: { // field return type
    default: boolean; // Boolean!
    id: string; // String!
    name: string; // String!
    roleId: string; // String!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
    search: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    calendly: string | null; // String
    clusters: NexusGenRootTypes['Cluster'][]; // [Cluster!]!
    discord_id: string; // String!
    github_url: string | null; // String
    id: string; // String!
    linkedin: string | null; // String
    mentors: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    name: string; // String!
    pictureURL: string | null; // String
    podLeaders: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    podName: Array<string | null> | null; // [String]
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Cluster: { // field return type name
    default: 'Boolean'
    id: 'String'
    name: 'String'
    roleId: 'String'
    users: 'User'
  }
  Query: { // field return type name
    me: 'User'
    search: 'User'
    token: 'String'
    user: 'User'
  }
  User: { // field return type name
    calendly: 'String'
    clusters: 'Cluster'
    discord_id: 'String'
    github_url: 'String'
    id: 'String'
    linkedin: 'String'
    mentors: 'User'
    name: 'String'
    pictureURL: 'String'
    podLeaders: 'User'
    podName: 'String'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Cluster: {
    users: { // args
      after?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      before?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Query: {
    search: { // args
      searchquery?: string | null; // String
    }
    user: { // args
      username?: string | null; // String
    }
  }
  User: {
    clusters: { // args
      after?: NexusGenInputs['ClusterWhereUniqueInput'] | null; // ClusterWhereUniqueInput
      before?: NexusGenInputs['ClusterWhereUniqueInput'] | null; // ClusterWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}